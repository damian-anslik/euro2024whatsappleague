create table public.bets (
    id bigint generated by default as identity not null,
    created_at timestamp with time zone not null default now(),
    updated_at timestamp with time zone null,
    match_id bigint null,
    user_id uuid null,
    predicted_home_goals smallint null,
    predicted_away_goals smallint null,
    constraint bets_pkey primary key (id),
    constraint bets_match_user_unique unique (match_id, user_id),
    constraint bets_match_id_fkey foreign KEY (match_id) references matches (id) on update CASCADE on delete CASCADE,
    constraint bets_user_id_fkey foreign KEY (user_id) references auth.users (id) on update CASCADE on delete CASCADE
) TABLESPACE pg_default;

create trigger handle_updated_at BEFORE
update
    on bets for EACH row execute FUNCTION extensions.moddatetime ('updated_at');

create trigger bets_check_can_place BEFORE
INSERT
    or
update
    on bets for EACH row execute FUNCTION prevent_bets_when_closed ();

create trigger prevent_redundant_bet_updates BEFORE
update
    on bets for EACH row execute FUNCTION skip_redundant_bet_updates ();